# coding: utf-8

"""
    Zenkipay API

    Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@zenki.fi
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zenkipay-api-client import schemas  # noqa: F401


class CreateOrder(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Object used with the information required to create an order.
    """


    class MetaOapg:
        required = {
            "countryCodeIso2",
            "breakdown",
            "type",
            "items",
            "version",
        }
        
        class properties:
            
            
            class version(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 9
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "WITH_CARRIER": "WITH_CARRIER",
                        "WITHOUT_CARRIER": "WITHOUT_CARRIER",
                        "MIXED": "MIXED",
                    }
                
                @schemas.classproperty
                def WITH_CARRIER(cls):
                    return cls("WITH_CARRIER")
                
                @schemas.classproperty
                def WITHOUT_CARRIER(cls):
                    return cls("WITHOUT_CARRIER")
                
                @schemas.classproperty
                def MIXED(cls):
                    return cls("MIXED")
            
            
            class countryCodeIso2(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2
        
            @staticmethod
            def breakdown() -> typing.Type['Breakdown']:
                return Breakdown
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Item']:
                        return Item
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Item'], typing.List['Item']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Item':
                    return super().__getitem__(i)
            
            
            class orderId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 128
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'orderId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class cartId(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    max_length = 128
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'cartId':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def shopper() -> typing.Type['Shopper']:
                return Shopper
            
            
            class metadata(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
            
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "version": version,
                "type": type,
                "countryCodeIso2": countryCodeIso2,
                "breakdown": breakdown,
                "items": items,
                "orderId": orderId,
                "cartId": cartId,
                "shopper": shopper,
                "metadata": metadata,
            }
    
    countryCodeIso2: MetaOapg.properties.countryCodeIso2
    breakdown: 'Breakdown'
    type: MetaOapg.properties.type
    items: MetaOapg.properties.items
    version: MetaOapg.properties.version
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryCodeIso2"]) -> MetaOapg.properties.countryCodeIso2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["breakdown"]) -> 'Breakdown': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderId"]) -> MetaOapg.properties.orderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cartId"]) -> MetaOapg.properties.cartId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shopper"]) -> 'Shopper': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "type", "countryCodeIso2", "breakdown", "items", "orderId", "cartId", "shopper", "metadata", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryCodeIso2"]) -> MetaOapg.properties.countryCodeIso2: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["breakdown"]) -> 'Breakdown': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderId"]) -> typing.Union[MetaOapg.properties.orderId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cartId"]) -> typing.Union[MetaOapg.properties.cartId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shopper"]) -> typing.Union['Shopper', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "type", "countryCodeIso2", "breakdown", "items", "orderId", "cartId", "shopper", "metadata", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        countryCodeIso2: typing.Union[MetaOapg.properties.countryCodeIso2, str, ],
        breakdown: 'Breakdown',
        type: typing.Union[MetaOapg.properties.type, str, ],
        items: typing.Union[MetaOapg.properties.items, list, tuple, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        orderId: typing.Union[MetaOapg.properties.orderId, None, str, schemas.Unset] = schemas.unset,
        cartId: typing.Union[MetaOapg.properties.cartId, None, str, schemas.Unset] = schemas.unset,
        shopper: typing.Union['Shopper', schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateOrder':
        return super().__new__(
            cls,
            *args,
            countryCodeIso2=countryCodeIso2,
            breakdown=breakdown,
            type=type,
            items=items,
            version=version,
            orderId=orderId,
            cartId=cartId,
            shopper=shopper,
            metadata=metadata,
            _configuration=_configuration,
            **kwargs,
        )

from zenkipay-api-client.fi.zenki.zenkipay.api.model.breakdown import Breakdown
from zenkipay-api-client.fi.zenki.zenkipay.api.model.item import Item
from zenkipay-api-client.fi.zenki.zenkipay.api.model.shopper import Shopper
