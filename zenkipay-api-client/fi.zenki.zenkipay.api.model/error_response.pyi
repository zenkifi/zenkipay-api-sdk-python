# coding: utf-8

"""
    Zenkipay API

    Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@zenki.fi
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zenkipay-api-client import schemas  # noqa: F401


class ErrorResponse(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "humanMessage",
            "requestId",
            "errorCode",
            "category",
            "title",
            "timestamp",
        }
        
        class properties:
            
            
            class requestId(
                schemas.StrSchema
            ):
                pass
            
            
            class title(
                schemas.StrSchema
            ):
                pass
            
            
            class errorCode(
                schemas.Int64Schema
            ):
                pass
            
            
            class category(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def FATAL(cls):
                    return cls("FATAL")
                
                @schemas.classproperty
                def SEVERE(cls):
                    return cls("SEVERE")
                
                @schemas.classproperty
                def ERROR(cls):
                    return cls("ERROR")
                
                @schemas.classproperty
                def WARN(cls):
                    return cls("WARN")
                
                @schemas.classproperty
                def INFO(cls):
                    return cls("INFO")
            
            
            class humanMessage(
                schemas.StrSchema
            ):
                pass
            
            
            class timestamp(
                schemas.Int64Schema
            ):
                pass
            
            
            class validationErrors(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            required = {
                                "field",
                                "objectName",
                                "message",
                            }
                            
                            class properties:
                                
                                
                                class objectName(
                                    schemas.StrSchema
                                ):
                                    pass
                                
                                
                                class field(
                                    schemas.StrSchema
                                ):
                                    pass
                                
                                
                                class message(
                                    schemas.StrSchema
                                ):
                                    pass
                                __annotations__ = {
                                    "objectName": objectName,
                                    "field": field,
                                    "message": message,
                                }
                        
                        field: MetaOapg.properties.field
                        objectName: MetaOapg.properties.objectName
                        message: MetaOapg.properties.message
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["objectName"]) -> MetaOapg.properties.objectName: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["field"]) -> MetaOapg.properties.field: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["objectName", "field", "message", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["objectName"]) -> MetaOapg.properties.objectName: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["field"]) -> MetaOapg.properties.field: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["objectName", "field", "message", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *args: typing.Union[dict, frozendict.frozendict, ],
                            field: typing.Union[MetaOapg.properties.field, str, ],
                            objectName: typing.Union[MetaOapg.properties.objectName, str, ],
                            message: typing.Union[MetaOapg.properties.message, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'items':
                            return super().__new__(
                                cls,
                                *args,
                                field=field,
                                objectName=objectName,
                                message=message,
                                _configuration=_configuration,
                                **kwargs,
                            )
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'validationErrors':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "requestId": requestId,
                "title": title,
                "errorCode": errorCode,
                "category": category,
                "humanMessage": humanMessage,
                "timestamp": timestamp,
                "validationErrors": validationErrors,
            }
    
    humanMessage: MetaOapg.properties.humanMessage
    requestId: MetaOapg.properties.requestId
    errorCode: MetaOapg.properties.errorCode
    category: MetaOapg.properties.category
    title: MetaOapg.properties.title
    timestamp: MetaOapg.properties.timestamp
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requestId"]) -> MetaOapg.properties.requestId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["humanMessage"]) -> MetaOapg.properties.humanMessage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validationErrors"]) -> MetaOapg.properties.validationErrors: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["requestId", "title", "errorCode", "category", "humanMessage", "timestamp", "validationErrors", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requestId"]) -> MetaOapg.properties.requestId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["errorCode"]) -> MetaOapg.properties.errorCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> MetaOapg.properties.category: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["humanMessage"]) -> MetaOapg.properties.humanMessage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validationErrors"]) -> typing.Union[MetaOapg.properties.validationErrors, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["requestId", "title", "errorCode", "category", "humanMessage", "timestamp", "validationErrors", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        humanMessage: typing.Union[MetaOapg.properties.humanMessage, str, ],
        requestId: typing.Union[MetaOapg.properties.requestId, str, ],
        errorCode: typing.Union[MetaOapg.properties.errorCode, decimal.Decimal, int, ],
        category: typing.Union[MetaOapg.properties.category, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        timestamp: typing.Union[MetaOapg.properties.timestamp, decimal.Decimal, int, ],
        validationErrors: typing.Union[MetaOapg.properties.validationErrors, list, tuple, None, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ErrorResponse':
        return super().__new__(
            cls,
            *args,
            humanMessage=humanMessage,
            requestId=requestId,
            errorCode=errorCode,
            category=category,
            title=title,
            timestamp=timestamp,
            validationErrors=validationErrors,
            _configuration=_configuration,
            **kwargs,
        )
