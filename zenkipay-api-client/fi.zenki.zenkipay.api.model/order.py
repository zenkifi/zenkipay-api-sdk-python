# coding: utf-8

"""
    Zenkipay API

    Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@zenki.fi
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zenkipay-api-client import schemas  # noqa: F401


class Order(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Object that represents the detailed information of an order.
    """


    class MetaOapg:
        required = {
            "createdAt",
            "countryCodeIso2",
            "zenkiOrderId",
            "breakdown",
            "type",
            "items",
            "version",
            "status",
        }
        
        class properties:
            
            
            class version(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 9
            
            
            class zenkiOrderId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 128
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "WITH_CARRIER": "WITH_CARRIER",
                        "WITHOUT_CARRIER": "WITHOUT_CARRIER",
                        "MIXED": "MIXED",
                    }
                
                @schemas.classproperty
                def WITH_CARRIER(cls):
                    return cls("WITH_CARRIER")
                
                @schemas.classproperty
                def WITHOUT_CARRIER(cls):
                    return cls("WITHOUT_CARRIER")
                
                @schemas.classproperty
                def MIXED(cls):
                    return cls("MIXED")
            
            
            class countryCodeIso2(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 2
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PENDING": "PENDING",
                        "READY4PAY": "READY4PAY",
                        "AWAITING_PAYMENT": "AWAITING_PAYMENT",
                        "AWAITING_DELIVERY": "AWAITING_DELIVERY",
                        "DELIVERED_SERVICE": "DELIVERED_SERVICE",
                        "AWAITING_SHIPMENT": "AWAITING_SHIPMENT",
                        "SHIPPED": "SHIPPED",
                        "SHIPMENT_ERROR": "SHIPMENT_ERROR",
                        "AWAITING_SHOPPER_APPROVAL": "AWAITING_SHOPPER_APPROVAL",
                        "DISPUTED": "DISPUTED",
                        "PENDING_SHOPPER_RETURN": "PENDING_SHOPPER_RETURN",
                        "REFUNDED": "REFUNDED",
                        "COMPLETED": "COMPLETED",
                        "SETTLED": "SETTLED",
                    }
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def READY4PAY(cls):
                    return cls("READY4PAY")
                
                @schemas.classproperty
                def AWAITING_PAYMENT(cls):
                    return cls("AWAITING_PAYMENT")
                
                @schemas.classproperty
                def AWAITING_DELIVERY(cls):
                    return cls("AWAITING_DELIVERY")
                
                @schemas.classproperty
                def DELIVERED_SERVICE(cls):
                    return cls("DELIVERED_SERVICE")
                
                @schemas.classproperty
                def AWAITING_SHIPMENT(cls):
                    return cls("AWAITING_SHIPMENT")
                
                @schemas.classproperty
                def SHIPPED(cls):
                    return cls("SHIPPED")
                
                @schemas.classproperty
                def SHIPMENT_ERROR(cls):
                    return cls("SHIPMENT_ERROR")
                
                @schemas.classproperty
                def AWAITING_SHOPPER_APPROVAL(cls):
                    return cls("AWAITING_SHOPPER_APPROVAL")
                
                @schemas.classproperty
                def DISPUTED(cls):
                    return cls("DISPUTED")
                
                @schemas.classproperty
                def PENDING_SHOPPER_RETURN(cls):
                    return cls("PENDING_SHOPPER_RETURN")
                
                @schemas.classproperty
                def REFUNDED(cls):
                    return cls("REFUNDED")
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("COMPLETED")
                
                @schemas.classproperty
                def SETTLED(cls):
                    return cls("SETTLED")
            
            
            class createdAt(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
        
            @staticmethod
            def breakdown() -> typing.Type['Breakdown']:
                return Breakdown
            
            
            class items(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Item']:
                        return Item
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Item'], typing.List['Item']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'items':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Item':
                    return super().__getitem__(i)
            
            
            class orderId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 128
            
            
            class cartId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 128
        
            @staticmethod
            def shopper() -> typing.Type['Shopper']:
                return Shopper
            
            
            class paymentInfo(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    required = {
                        "exchangeRate",
                        "cryptoLove",
                        "cryptoPayment",
                    }
                    
                    class properties:
                        
                        
                        class exchangeRate(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "from",
                                    "to",
                                    "value",
                                    "timestamp",
                                }
                                
                                class properties:
                                    
                                    
                                    class _from(
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            max_length = 5
                                    
                                    
                                    class to(
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            max_length = 5
                                    
                                    
                                    class value(
                                        schemas.Float64Schema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            format = 'double'
                                            inclusive_minimum = 0
                                    
                                    
                                    class amount(
                                        schemas.Float64Schema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            format = 'double'
                                            inclusive_minimum = 0
                                    
                                    
                                    class timestamp(
                                        schemas.Int64Schema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            format = 'int64'
                                            inclusive_minimum = 0
                                    __annotations__ = {
                                        "from": _from,
                                        "to": to,
                                        "value": value,
                                        "amount": amount,
                                        "timestamp": timestamp,
                                    }
                            
                            to: MetaOapg.properties.to
                            value: MetaOapg.properties.value
                            timestamp: MetaOapg.properties.timestamp
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["from", "to", "value", "amount", "timestamp", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["to"]) -> MetaOapg.properties.to: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["from", "to", "value", "amount", "timestamp", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                to: typing.Union[MetaOapg.properties.to, str, ],
                                value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, float, ],
                                timestamp: typing.Union[MetaOapg.properties.timestamp, decimal.Decimal, int, ],
                                amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'exchangeRate':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    to=to,
                                    value=value,
                                    timestamp=timestamp,
                                    amount=amount,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        
                        
                        class cryptoLove(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "discountPercentage",
                                    "finalAmount",
                                    "discountAmount",
                                    "currency",
                                }
                                
                                class properties:
                                    
                                    
                                    class discountPercentage(
                                        schemas.Float64Schema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            format = 'double'
                                            inclusive_maximum = 100
                                            inclusive_minimum = 0
                                    
                                    
                                    class discountAmount(
                                        schemas.Float64Schema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            format = 'double'
                                            inclusive_minimum = 0
                                    
                                    
                                    class finalAmount(
                                        schemas.Float64Schema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            format = 'double'
                                            inclusive_minimum = 0
                                    
                                    
                                    class currency(
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            max_length = 5
                                    __annotations__ = {
                                        "discountPercentage": discountPercentage,
                                        "discountAmount": discountAmount,
                                        "finalAmount": finalAmount,
                                        "currency": currency,
                                    }
                            
                            discountPercentage: MetaOapg.properties.discountPercentage
                            finalAmount: MetaOapg.properties.finalAmount
                            discountAmount: MetaOapg.properties.discountAmount
                            currency: MetaOapg.properties.currency
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["discountPercentage"]) -> MetaOapg.properties.discountPercentage: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["discountAmount"]) -> MetaOapg.properties.discountAmount: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["finalAmount"]) -> MetaOapg.properties.finalAmount: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["discountPercentage", "discountAmount", "finalAmount", "currency", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["discountPercentage"]) -> MetaOapg.properties.discountPercentage: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["discountAmount"]) -> MetaOapg.properties.discountAmount: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["finalAmount"]) -> MetaOapg.properties.finalAmount: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["discountPercentage", "discountAmount", "finalAmount", "currency", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                discountPercentage: typing.Union[MetaOapg.properties.discountPercentage, decimal.Decimal, int, float, ],
                                finalAmount: typing.Union[MetaOapg.properties.finalAmount, decimal.Decimal, int, float, ],
                                discountAmount: typing.Union[MetaOapg.properties.discountAmount, decimal.Decimal, int, float, ],
                                currency: typing.Union[MetaOapg.properties.currency, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'cryptoLove':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    discountPercentage=discountPercentage,
                                    finalAmount=finalAmount,
                                    discountAmount=discountAmount,
                                    currency=currency,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                    
                        @staticmethod
                        def cryptoPayment() -> typing.Type['CryptoPayment']:
                            return CryptoPayment
                        __annotations__ = {
                            "exchangeRate": exchangeRate,
                            "cryptoLove": cryptoLove,
                            "cryptoPayment": cryptoPayment,
                        }
            
                
                exchangeRate: MetaOapg.properties.exchangeRate
                cryptoLove: MetaOapg.properties.cryptoLove
                cryptoPayment: 'CryptoPayment'
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["exchangeRate"]) -> MetaOapg.properties.exchangeRate: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["cryptoLove"]) -> MetaOapg.properties.cryptoLove: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["cryptoPayment"]) -> 'CryptoPayment': ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["exchangeRate", "cryptoLove", "cryptoPayment", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["exchangeRate"]) -> MetaOapg.properties.exchangeRate: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["cryptoLove"]) -> MetaOapg.properties.cryptoLove: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["cryptoPayment"]) -> 'CryptoPayment': ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["exchangeRate", "cryptoLove", "cryptoPayment", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'paymentInfo':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class settlementInfo(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    required = {
                        "cryptoSettlement",
                    }
                    
                    class properties:
                        
                        
                        class cryptoSettlement(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "finalAmount",
                                    "currency",
                                }
                                
                                class properties:
                                    
                                    
                                    class finalAmount(
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            max_length = 64
                                    
                                    
                                    class currency(
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            max_length = 5
                                    __annotations__ = {
                                        "finalAmount": finalAmount,
                                        "currency": currency,
                                    }
                            
                            finalAmount: MetaOapg.properties.finalAmount
                            currency: MetaOapg.properties.currency
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["finalAmount"]) -> MetaOapg.properties.finalAmount: ...
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["finalAmount", "currency", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["finalAmount"]) -> MetaOapg.properties.finalAmount: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["finalAmount", "currency", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                finalAmount: typing.Union[MetaOapg.properties.finalAmount, str, ],
                                currency: typing.Union[MetaOapg.properties.currency, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'cryptoSettlement':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    finalAmount=finalAmount,
                                    currency=currency,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "cryptoSettlement": cryptoSettlement,
                        }
            
                
                cryptoSettlement: MetaOapg.properties.cryptoSettlement
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["cryptoSettlement"]) -> MetaOapg.properties.cryptoSettlement: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["cryptoSettlement", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["cryptoSettlement"]) -> MetaOapg.properties.cryptoSettlement: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cryptoSettlement", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'settlementInfo':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class metadata(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
            
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'metadata':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class dispute(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "createdAt",
                        "status",
                    }
                    
                    class properties:
                        
                        
                        class status(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "OPEN": "OPEN",
                                    "REFUND": "REFUND",
                                    "RESOLVED": "RESOLVED",
                                }
                            
                            @schemas.classproperty
                            def OPEN(cls):
                                return cls("OPEN")
                            
                            @schemas.classproperty
                            def REFUND(cls):
                                return cls("REFUND")
                            
                            @schemas.classproperty
                            def RESOLVED(cls):
                                return cls("RESOLVED")
                        
                        
                        class createdAt(
                            schemas.Int64Schema
                        ):
                        
                        
                            class MetaOapg:
                                format = 'int64'
                                inclusive_minimum = 0
                        
                        
                        class resolutionRequestType(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "REQUEST_REFUND": "REFUND",
                                    "REQUEST_CONCILIATED": "CONCILIATED",
                                }
                            
                            @schemas.classproperty
                            def REFUND(cls):
                                return cls("REQUEST_REFUND")
                            
                            @schemas.classproperty
                            def CONCILIATED(cls):
                                return cls("REQUEST_CONCILIATED")
                        
                        
                        class resolutionRequestAt(
                            schemas.Int64Schema
                        ):
                        
                        
                            class MetaOapg:
                                format = 'int64'
                                inclusive_minimum = 0
                        __annotations__ = {
                            "status": status,
                            "createdAt": createdAt,
                            "resolutionRequestType": resolutionRequestType,
                            "resolutionRequestAt": resolutionRequestAt,
                        }
                
                createdAt: MetaOapg.properties.createdAt
                status: MetaOapg.properties.status
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["resolutionRequestType"]) -> MetaOapg.properties.resolutionRequestType: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["resolutionRequestAt"]) -> MetaOapg.properties.resolutionRequestAt: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "createdAt", "resolutionRequestType", "resolutionRequestAt", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["resolutionRequestType"]) -> typing.Union[MetaOapg.properties.resolutionRequestType, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["resolutionRequestAt"]) -> typing.Union[MetaOapg.properties.resolutionRequestAt, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "createdAt", "resolutionRequestType", "resolutionRequestAt", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    createdAt: typing.Union[MetaOapg.properties.createdAt, decimal.Decimal, int, ],
                    status: typing.Union[MetaOapg.properties.status, str, ],
                    resolutionRequestType: typing.Union[MetaOapg.properties.resolutionRequestType, str, schemas.Unset] = schemas.unset,
                    resolutionRequestAt: typing.Union[MetaOapg.properties.resolutionRequestAt, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'dispute':
                    return super().__new__(
                        cls,
                        *_args,
                        createdAt=createdAt,
                        status=status,
                        resolutionRequestType=resolutionRequestType,
                        resolutionRequestAt=resolutionRequestAt,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class claim(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "createdAt",
                        "zenkiClaimId",
                        "status",
                    }
                    
                    class properties:
                        
                        
                        class reason(
                            schemas.StrBase,
                            schemas.NoneBase,
                            schemas.Schema,
                            schemas.NoneStrMixin
                        ):
                        
                        
                            class MetaOapg:
                                max_length = 255
                        
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[None, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                            ) -> 'reason':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    _configuration=_configuration,
                                )
                        
                        
                        class status(
                            schemas.EnumBase,
                            schemas.StrSchema
                        ):
                        
                        
                            class MetaOapg:
                                enum_value_to_name = {
                                    "OPEN": "OPEN",
                                    "REFUND": "REFUND",
                                    "RESOLVED": "RESOLVED",
                                    "REJECTED": "REJECTED",
                                }
                            
                            @schemas.classproperty
                            def OPEN(cls):
                                return cls("OPEN")
                            
                            @schemas.classproperty
                            def REFUND(cls):
                                return cls("REFUND")
                            
                            @schemas.classproperty
                            def RESOLVED(cls):
                                return cls("RESOLVED")
                            
                            @schemas.classproperty
                            def REJECTED(cls):
                                return cls("REJECTED")
                        
                        
                        class createdAt(
                            schemas.Int64Schema
                        ):
                        
                        
                            class MetaOapg:
                                format = 'int64'
                                inclusive_minimum = 0
                        __annotations__ = {
                            "reason": reason,
                            "status": status,
                            "createdAt": createdAt,
                        }
                
                createdAt: MetaOapg.properties.createdAt
                zenkiClaimId: schemas.AnyTypeSchema
                status: MetaOapg.properties.status
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["reason", "status", "createdAt", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["reason", "status", "createdAt", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    createdAt: typing.Union[MetaOapg.properties.createdAt, decimal.Decimal, int, ],
                    zenkiClaimId: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    status: typing.Union[MetaOapg.properties.status, str, ],
                    reason: typing.Union[MetaOapg.properties.reason, None, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'claim':
                    return super().__new__(
                        cls,
                        *_args,
                        createdAt=createdAt,
                        zenkiClaimId=zenkiClaimId,
                        status=status,
                        reason=reason,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class _links(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class refund(
                            schemas.DictSchema
                        ):
                        
                        
                            class MetaOapg:
                                required = {
                                    "href",
                                }
                                
                                class properties:
                                    
                                    
                                    class href(
                                        schemas.StrSchema
                                    ):
                                    
                                    
                                        class MetaOapg:
                                            max_length = 300
                                    __annotations__ = {
                                        "href": href,
                                    }
                            
                            href: MetaOapg.properties.href
                            
                            @typing.overload
                            def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
                            
                            @typing.overload
                            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                            
                            def __getitem__(self, name: typing.Union[typing_extensions.Literal["href", ], str]):
                                # dict_instance[name] accessor
                                return super().__getitem__(name)
                            
                            
                            @typing.overload
                            def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
                            
                            @typing.overload
                            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                            
                            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["href", ], str]):
                                return super().get_item_oapg(name)
                            
                        
                            def __new__(
                                cls,
                                *_args: typing.Union[dict, frozendict.frozendict, ],
                                href: typing.Union[MetaOapg.properties.href, str, ],
                                _configuration: typing.Optional[schemas.Configuration] = None,
                                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                            ) -> 'refund':
                                return super().__new__(
                                    cls,
                                    *_args,
                                    href=href,
                                    _configuration=_configuration,
                                    **kwargs,
                                )
                        __annotations__ = {
                            "refund": refund,
                        }
            
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["refund"]) -> MetaOapg.properties.refund: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["refund", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["refund"]) -> typing.Union[MetaOapg.properties.refund, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["refund", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, None, ],
                    refund: typing.Union[MetaOapg.properties.refund, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> '_links':
                    return super().__new__(
                        cls,
                        *_args,
                        refund=refund,
                        _configuration=_configuration,
                        **kwargs,
                    )
            paymentSignature = schemas.StrSchema
            __annotations__ = {
                "version": version,
                "zenkiOrderId": zenkiOrderId,
                "type": type,
                "countryCodeIso2": countryCodeIso2,
                "status": status,
                "createdAt": createdAt,
                "breakdown": breakdown,
                "items": items,
                "orderId": orderId,
                "cartId": cartId,
                "shopper": shopper,
                "paymentInfo": paymentInfo,
                "settlementInfo": settlementInfo,
                "metadata": metadata,
                "dispute": dispute,
                "claim": claim,
                "_links": _links,
                "paymentSignature": paymentSignature,
            }
    
    createdAt: MetaOapg.properties.createdAt
    countryCodeIso2: MetaOapg.properties.countryCodeIso2
    zenkiOrderId: MetaOapg.properties.zenkiOrderId
    breakdown: 'Breakdown'
    type: MetaOapg.properties.type
    items: MetaOapg.properties.items
    version: MetaOapg.properties.version
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zenkiOrderId"]) -> MetaOapg.properties.zenkiOrderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countryCodeIso2"]) -> MetaOapg.properties.countryCodeIso2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["breakdown"]) -> 'Breakdown': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["orderId"]) -> MetaOapg.properties.orderId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cartId"]) -> MetaOapg.properties.cartId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shopper"]) -> 'Shopper': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentInfo"]) -> MetaOapg.properties.paymentInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settlementInfo"]) -> MetaOapg.properties.settlementInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dispute"]) -> MetaOapg.properties.dispute: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["claim"]) -> MetaOapg.properties.claim: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["_links"]) -> MetaOapg.properties._links: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["paymentSignature"]) -> MetaOapg.properties.paymentSignature: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["version", "zenkiOrderId", "type", "countryCodeIso2", "status", "createdAt", "breakdown", "items", "orderId", "cartId", "shopper", "paymentInfo", "settlementInfo", "metadata", "dispute", "claim", "_links", "paymentSignature", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zenkiOrderId"]) -> MetaOapg.properties.zenkiOrderId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countryCodeIso2"]) -> MetaOapg.properties.countryCodeIso2: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdAt"]) -> MetaOapg.properties.createdAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["breakdown"]) -> 'Breakdown': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["orderId"]) -> typing.Union[MetaOapg.properties.orderId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cartId"]) -> typing.Union[MetaOapg.properties.cartId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shopper"]) -> typing.Union['Shopper', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentInfo"]) -> typing.Union[MetaOapg.properties.paymentInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settlementInfo"]) -> typing.Union[MetaOapg.properties.settlementInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dispute"]) -> typing.Union[MetaOapg.properties.dispute, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["claim"]) -> typing.Union[MetaOapg.properties.claim, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["_links"]) -> typing.Union[MetaOapg.properties._links, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["paymentSignature"]) -> typing.Union[MetaOapg.properties.paymentSignature, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["version", "zenkiOrderId", "type", "countryCodeIso2", "status", "createdAt", "breakdown", "items", "orderId", "cartId", "shopper", "paymentInfo", "settlementInfo", "metadata", "dispute", "claim", "_links", "paymentSignature", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        createdAt: typing.Union[MetaOapg.properties.createdAt, decimal.Decimal, int, ],
        countryCodeIso2: typing.Union[MetaOapg.properties.countryCodeIso2, str, ],
        zenkiOrderId: typing.Union[MetaOapg.properties.zenkiOrderId, str, ],
        breakdown: 'Breakdown',
        type: typing.Union[MetaOapg.properties.type, str, ],
        items: typing.Union[MetaOapg.properties.items, list, tuple, ],
        version: typing.Union[MetaOapg.properties.version, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        orderId: typing.Union[MetaOapg.properties.orderId, str, schemas.Unset] = schemas.unset,
        cartId: typing.Union[MetaOapg.properties.cartId, str, schemas.Unset] = schemas.unset,
        shopper: typing.Union['Shopper', schemas.Unset] = schemas.unset,
        paymentInfo: typing.Union[MetaOapg.properties.paymentInfo, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        settlementInfo: typing.Union[MetaOapg.properties.settlementInfo, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        dispute: typing.Union[MetaOapg.properties.dispute, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        claim: typing.Union[MetaOapg.properties.claim, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _links: typing.Union[MetaOapg.properties._links, dict, frozendict.frozendict, None, schemas.Unset] = schemas.unset,
        paymentSignature: typing.Union[MetaOapg.properties.paymentSignature, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Order':
        return super().__new__(
            cls,
            *_args,
            createdAt=createdAt,
            countryCodeIso2=countryCodeIso2,
            zenkiOrderId=zenkiOrderId,
            breakdown=breakdown,
            type=type,
            items=items,
            version=version,
            status=status,
            orderId=orderId,
            cartId=cartId,
            shopper=shopper,
            paymentInfo=paymentInfo,
            settlementInfo=settlementInfo,
            metadata=metadata,
            dispute=dispute,
            claim=claim,
            _links=_links,
            paymentSignature=paymentSignature,
            _configuration=_configuration,
            **kwargs,
        )

from zenkipay-api-client.fi.zenki.zenkipay.api.model.breakdown import Breakdown
from zenkipay-api-client.fi.zenki.zenkipay.api.model.crypto_payment import CryptoPayment
from zenkipay-api-client.fi.zenki.zenkipay.api.model.item import Item
from zenkipay-api-client.fi.zenki.zenkipay.api.model.shopper import Shopper
