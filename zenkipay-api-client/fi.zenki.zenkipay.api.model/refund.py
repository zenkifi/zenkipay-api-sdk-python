# coding: utf-8

"""
    Zenkipay API

    Definition of technical specification of the product; Zenkipay is a gateway cryptocurrency payment system that allows merchant's to receive payments on their e-commerce portals. Unlike other platforms, Zenkipay ensures customer satisfaction through its payment process. guarantee deposit (delivered product and expected quality) to settle payment to the merchant, thus avoiding the loss of client assets due to online scams.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: support@zenki.fi
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from zenkipay-api-client import schemas  # noqa: F401


class Refund(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Registered refund detail.
    """


    class MetaOapg:
        required = {
            "reason",
            "amount",
            "currency",
            "zenkiRefundId",
            "placedAt",
            "cryptoPayment",
            "status",
        }
        
        class properties:
            
            
            class zenkiRefundId(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 128
            
            
            class reason(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    max_length = 100
        
            @staticmethod
            def cryptoPayment() -> typing.Type['CryptoPayment']:
                return CryptoPayment
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "PENDING": "PENDING",
                        "AWAITING_REFUND": "AWAITING_REFUND",
                        "REFUNDED": "REFUNDED",
                        "FAILED": "FAILED",
                    }
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("PENDING")
                
                @schemas.classproperty
                def AWAITING_REFUND(cls):
                    return cls("AWAITING_REFUND")
                
                @schemas.classproperty
                def REFUNDED(cls):
                    return cls("REFUNDED")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
            
            
            class placedAt(
                schemas.Int64Schema
            ):
            
            
                class MetaOapg:
                    format = 'int64'
                    inclusive_minimum = 0
            
            
            class fiatOriginalPayment(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    required = {
                        "amount",
                        "currency",
                    }
                    
                    class properties:
                        
                        
                        class amount(
                            schemas.Float64Schema
                        ):
                        
                        
                            class MetaOapg:
                                format = 'double'
                                inclusive_minimum = 0
                        
                        
                        class currencyCodeIso3(
                            schemas.StrSchema
                        ):
                        
                        
                            class MetaOapg:
                                max_length = 5
                        __annotations__ = {
                            "amount": amount,
                            "currencyCodeIso3": currencyCodeIso3,
                        }
                
                amount: MetaOapg.properties.amount
                currency: schemas.AnyTypeSchema
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["currencyCodeIso3"]) -> MetaOapg.properties.currencyCodeIso3: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["amount", "currencyCodeIso3", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["currencyCodeIso3"]) -> typing.Union[MetaOapg.properties.currencyCodeIso3, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["amount", "currencyCodeIso3", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, float, ],
                    currency: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    currencyCodeIso3: typing.Union[MetaOapg.properties.currencyCodeIso3, str, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'fiatOriginalPayment':
                    return super().__new__(
                        cls,
                        *args,
                        amount=amount,
                        currency=currency,
                        currencyCodeIso3=currencyCodeIso3,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "zenkiRefundId": zenkiRefundId,
                "reason": reason,
                "cryptoPayment": cryptoPayment,
                "status": status,
                "placedAt": placedAt,
                "fiatOriginalPayment": fiatOriginalPayment,
            }
    
    reason: MetaOapg.properties.reason
    amount: schemas.AnyTypeSchema
    currency: schemas.AnyTypeSchema
    zenkiRefundId: MetaOapg.properties.zenkiRefundId
    placedAt: MetaOapg.properties.placedAt
    cryptoPayment: 'CryptoPayment'
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["zenkiRefundId"]) -> MetaOapg.properties.zenkiRefundId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cryptoPayment"]) -> 'CryptoPayment': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["placedAt"]) -> MetaOapg.properties.placedAt: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fiatOriginalPayment"]) -> MetaOapg.properties.fiatOriginalPayment: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["zenkiRefundId", "reason", "cryptoPayment", "status", "placedAt", "fiatOriginalPayment", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["zenkiRefundId"]) -> MetaOapg.properties.zenkiRefundId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cryptoPayment"]) -> 'CryptoPayment': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["placedAt"]) -> MetaOapg.properties.placedAt: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fiatOriginalPayment"]) -> typing.Union[MetaOapg.properties.fiatOriginalPayment, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["zenkiRefundId", "reason", "cryptoPayment", "status", "placedAt", "fiatOriginalPayment", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        reason: typing.Union[MetaOapg.properties.reason, str, ],
        amount: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        currency: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        zenkiRefundId: typing.Union[MetaOapg.properties.zenkiRefundId, str, ],
        placedAt: typing.Union[MetaOapg.properties.placedAt, decimal.Decimal, int, ],
        cryptoPayment: 'CryptoPayment',
        status: typing.Union[MetaOapg.properties.status, str, ],
        fiatOriginalPayment: typing.Union[MetaOapg.properties.fiatOriginalPayment, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Refund':
        return super().__new__(
            cls,
            *args,
            reason=reason,
            amount=amount,
            currency=currency,
            zenkiRefundId=zenkiRefundId,
            placedAt=placedAt,
            cryptoPayment=cryptoPayment,
            status=status,
            fiatOriginalPayment=fiatOriginalPayment,
            _configuration=_configuration,
            **kwargs,
        )

from zenkipay-api-client.fi.zenki.zenkipay.api.model.crypto_payment import CryptoPayment
